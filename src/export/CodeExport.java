/*
 * Grady Landers
 * Master's Project - Code name Rubber Duck
 * code exporter super class
 */
package export;

import java.io.FileWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

abstract class CodeExport {
	//write opening block comment
	protected static void generateHeader(FileWriter f, String message) {
		try {
			f.append("/*\n * Code auto generated by the Rubber Duck programming tool on " + getNowString()
					+"\n * " + message
					+"\n */"
					+"\npackage output;\n\n");
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	//write imports
	protected static void generateImports(FileWriter f, String[] imports, String className) {
		try {
			for(int i=0; i<imports.length; i++) {
				f.append("import " + imports[i] + ";\n");
			}
			f.append("\npublic class "+className+" {\n");
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	//get current datetime modified from https://www.javatpoint.com/java-get-current-date
	protected static String getNowString() {
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
		LocalDateTime now = LocalDateTime.now();
		return dtf.format(now); 
	}
	
	//generate static variables for array program
	protected static void generateArrayVariables(FileWriter f, String type, Object[] arr, boolean num, Object target) throws Exception {
		try {
			f.append("\t//variables\n"
					+"\tstatic "+type+"[] arr = {");
			for(int i=0; i<arr.length; i++) {
				if(num) f.append(arr[i].toString());
				else f.append('"'+arr[i].toString()+'"');
				if(i < arr.length-1) f.append(",");
			}
			f.append("};\n");
			
			if(target != null) {
				String t;
				if(num) {
					t = target.toString();
					f.append("\tstatic double target = "+t+";\n");
				}
				else {
					t = '"'+target.toString()+'"';
					f.append("\tstatic String target = "+t+";\n");
				}
			}
			
			f.append("\n");
		}
		catch(Exception e) {
			throw e;
		}
	}
	
	//generate static variables for graph program
	protected static void generateGraphVariables(FileWriter f, boolean num, Object[][] graph, String type, Object target) throws Exception {
		try {
			f.append("\t//variables\n"
					+"\tstatic Object[][] graph = "+graphString(graph, num)+";\n");
			
			if(target != null) {
				if(type.contentEquals("String")) f.append("\tstatic String target = \""+target.toString()+"\";\n");
				else f.append("\tstatic "+type+" target = "+target.toString()+";\n");
			}
			
			f.append("\n");
		}
		catch(Exception e) {
			throw e;
		}
	}
	
	private static String graphString(Object[][] graph, boolean num) {
		String out = "{{";
		
		if(graph[0][0] == null) {
			for(int j=0; j<graph[0].length; j++) {
				out += "null";
				if(j < graph[0].length-1) out += ",";
			}
		}
		else {
			for(int j=0; j<graph[0].length; j++) {
				if(!num) out += '"'+graph[0][j].toString()+'"';
				else out += graph[0][j].toString();
				if(j < graph[0].length-1) out += ",";
			}
		}
		out += "},";
		
		for(int i=1; i<graph.length; i++) {
			out += "{";
			for(int j=0; j<graph[i].length; j++) {
				out += graph[i][j].toString();
				if(j < graph[i].length-1) out += ",";
			}
			out += "}";
			if(i < graph.length-1) out += ",";
		}
		
		out += "}";
		return out;
	}
}
